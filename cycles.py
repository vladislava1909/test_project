print("1. Найдите сумму всех натуральных чисел от 1 до N включительно.")

S = 0  # заводим переменную-счетчик, в которой мы будем считать сумму
N = 5  # заводим цикл for, в котором мы будем проходить по всем числам от одного до N


for i in range(1, N + 1):# равносильно выражению for i in [1, 2, 3, ... , N -1, N]:
    print("Значение суммы на предыдущем шаге: ", S)
    print("Текущее число: ", i)
    S = S + i  # cуммируем текущее число i и перезаписываем значение суммы
    print("Значение суммы после сложения: ", S)
    print("---")
print("Конец цикла")
print()
print("Ответ: сумма равна = ", S)

print("2. посчитать произведение всех чисел от 1 до N включительно.")

P = 1  # заводим переменную-счетчик, в которой мы будем считать сумму
N = 5  # заводим цикл for, в котором мы будем проходить по всем числам от одного до N


for i in range(1, N + 1):# равносильно выражению for i in [1, 2, 3, ... , N -1, N]:
    print("Значение суммы на предыдущем шаге: ", P)
    print("Текущее число: ", i)
    P = P * i  # cуммируем текущее число i и перезаписываем значение суммы
    print("Значение суммы после умножения: ", P)
    print("---")
print("Конец цикла")
print()
print("Ответ: произведение равно = ", P)

print("3. посчитать произведение всех чисел от 1 до N включительно.")

P = 1  # заводим переменную-счетчик, в которой мы будем считать сумму
N = 5  # заводим цикл for, в котором мы будем проходить по всем числам от одного до N
# запишите цикл for для подсчета произведения
for i in range(1, N+1):
    P *= i

print(P)

print("4. Напишите программу, которая будет печатать лесенку следующего типа: "
      "n = 3   * "
      "** "
      "***"
      " n = 4 "
      "* "
      "** "
      "*** "
      "****")

N = 3

for i in range(1, N + 1):
   print("*" * i)

N= 4

for i in range(1, N + 1):
   print("*" * i)

print("4. Напишите цикл, который будет складывать натуральные числа, пока их сумма не превысит 500")

S = 0  # заводим переменную-счетчик, в которой мы будем считать сумму
n = 1  # текущее натуральное число

# заводим цикл while, который будет работать, пока сумма не превысит 500
while S < 500:  # делай пока ...
    S += n  # увеличиваем сумму, равносильно S = S + n
    n += 1  # так как сумма ещё не достигла нужного значения, то увеличиваем переменную-счетчик
    print(S)

print("Сумма равна: ", S)
print("Количество чисел: ", n)

print("5. Напишите цикл с использованием whilе, который возводит числа в квадрат, "
      "пока результат меньше 1000.")

n = 0

while n**2 < 1000:
    n += 1
    print(n)
print("Квадрат равен: ", n)

print("7. Работа с вложенными циклами. ")

N = 2
M = 3
# заполнили матрицу последовательными числами
matrix = [
    [0, 1, 2],
    [3, 4, 5],
]


for i in range(N):  # цикл, отвечающий за строки
    for j in range(M):  # цикл, отвечающий за столбцы
        print(matrix[i][j], end=" ")
    print()  # перенос на новую строку

print("8. индекс, по которому дальше можем обратиться и получить элемент, к примеру, как здесь: ")

list_ = [-5, 2, 4, 8, 12, -7, 5]

for i in range(len(list_)):  # равносильно выражению for i in [0, 1, 2, 3, 4, 5, 6]:
    print("Индекс элемента: ", i)
    print("Значение элемента: ", list_[i])  # с помощью индекса получаем значение элемента
    print("---")
print("Конец цикла")

print("9. enumerate. Она возвращает кортежи, где на первом месте стоит индекс элемента, "
      "а на втором — его значение.")

list_ = [-5, 2, 4, 8, 12, -7, 5]
# Функция enumerate возвращает данные в виде кортежей,
# где на первом месте стоит индекс, а затем значение
# [(0, -5), (1, 2), (2, 4), ...]
for i, value in enumerate(list_):
    print("Индекс элемента: ", i)
    print("Значение элемента: ", value)  # с помощью индекса получаем значение элемента
    print("---")
print("Конец цикла")

list_ = [-5, 2, 4, 8, 12, -7, 5]
# Объявим переменную, в которой будем хранить индекс отрицательного элемента
index_negative = None

print("10. программа, которая находит индекс последнего отрицательного элемента в списке")

list_ = [-5, 2, 4, 8, 12, -7, 5]
# Объявим переменную, в которой будем хранить индекс отрицательного элемента
index_negative = None

for i, value in enumerate(list_):
    if list_[i] < 0:
        print("Отрицательное число: ", list_[i])
        index_negative = i  # перезаписываем значение индекса
        print("Новый индекс отрицательного числа: ", index_negative)
    else:
        print("Положительное число: ", list_[i])
    print("---")
print("Конец цикла")
print()
print("Ответ: индекс последнего отрицательного элемента = ", index_negative)

print("11. С помощью словаря в заданном тексте посчитать количество вхождения каждого символа.")

text = """
У лукоморья дуб зелёный;
Златая цепь на дубе том:
И днём и ночью кот учёный
Всё ходит по цепи кругом;
Идёт направо -- песнь заводит,
Налево -- сказку говорит.
Там чудеса: там леший бродит,
Русалка на ветвях сидит;
Там на неведомых дорожках
Следы невиданных зверей;
Избушка там на курьих ножках
Стоит без окон, без дверей;
Там лес и дол видений полны;
Там о заре прихлынут волны
На брег песчаный и пустой,
И тридцать витязей прекрасных
Чредой из вод выходят ясных,
И с ними дядька их морской;
Там королевич мимоходом
Пленяет грозного царя;
Там в облаках перед народом
Через леса, через моря
Колдун несёт богатыря;
В темнице там царевна тужит,
А бурый волк ей верно служит;
Там ступа с Бабою Ягой
Идёт, бредёт сама собой,
Там царь Кащей над златом чахнет;
Там русский дух... там Русью пахнет!
И там я был, и мёд я пил;
У моря видел дуб зелёный;
Под ним сидел, и кот учёный
Свои мне сказки говорил.
"""

text = text.lower()
text = text.replace(" ", "")
text = text.replace("\n", "")

count = {}  # для подсчета символов и их количества
for char in text:
   if char in count:  # если символ уже встречался, то увеличиваем его количество на 1
       count[char] += 1
   else:
       count[char] = 1
       for char, cnt in count.items():
           print(f"Символ {char} встречается {cnt} раз")

print("12. Проверьте, является ли заданное число степенью тройки.")

n = 9
while True:
    if n % 3 == 0:
         n = n // 3
         if n == 1:
              break
    else:
         break
         print("13. # Допишите функцию check_h так, чтобы она проверяла гипотезу Сиракуз для числа n. "
               "Гипотеза Сиракуз заключается в том, что любое натуральное число можно свести к 1, "
               "если повторять над ним следующие действия: если число четное, то разделить его пополам,"
               " если нечетное - умножить на 3, прибавить 1 и результат разделить на 2.")

         n = int(input("Введите число\n"))

         while True:
             if n % 2 == 0:
                 n = n // 2
             else:
                 n = (n * 3 + 1) // 2
             print(n)

             if n == 1:
                 print("Done")
                 break

print("14. В клетке находятся фазаны и кролики. Известно, что у них 35 голов и 94 ноги. "
      "Узнайте число фазанов и число кроликов.")

heads = 35  # количество голов
legs = 94  # количество ног

for r in range(heads + 1):  # количество кроликов
    for ph in range(heads + 1):  # количество фазанов
        #  если суммарное количество голов превышено или ног превышено, то переходим на следующий шаг цикла
        if (r + ph) > heads or \
           (r * 4 + ph * 2) > legs:
            continue
        if (r + ph) == heads and (r * 4 + ph * 2) == legs:
            print("Количество кроликов", r)
            print("Количество фазанов", ph)
            print("---")

print("15. Программа должна выводить «Обе переменные ложные», если они являются таковыми.")

a = input("Введите значение а: ")
b = input(" Введите значение b: ")
# пусть a и b - переменные, которые мы хотим проверить
if a and b:
    print("Обе переменные истинные")
    print(a, b)
elif a or b:
    print("Одна из переменных истинная")
    print(a or b)  # печать одной переменной, той, которая является истинной
else:
    print("Обе переменные ложные")

print("16. Представим, что на вход нашей программы подается число. "
      "А мы хотим проверить, является ли оно целым, находится ли в определенном промежутке "
      "(например от 100 до 999 включительно), да еще и делится ли на 2 и 3 одновременно.")

a = int(input("Введите число: ")) #912
if type(a) == int:
    if 100 <= a <= 999:
        if a % 2 == 0:
            if a % 3 == 0:
                print("Число удовлетворяет условиям")
    else:
        print("Число не удовлетворяет условиям")

print("17. Напишите тот же алгоритм, но объедините все условия в одну строку,"
      " используя логические операторы и операторы сравнения:")

a = int(input("Введите число: ")) #912
if type(a) == int and 100 <= a <= 999 and a % 2 == 0 and a % 3 == 0:
    print("Число удовлетворяет условиям")
else:
    print("Число не удовлетворяет условиям")

print("18. Напишите программу, которая на вход принимает последовательность целых чисел, "
      "и возвращает True, если все числа ненулевые, и False, если хотя бы одно число равно 0.")

L = list(map(int, input("Введите последовательность целых чисел через пробел: ").split()))

print(all(L))

print("19. Напишите программу, которая на вход принимает последовательность целых чисел"
      "и возвращает True, если все числа равны нулю, и False,"
      "если найдется хотя бы одно ненулевое число. "
      "Разрешается использование только логических операторов и функций all([ ]) и any([ ]).")

L = list(map(int, input("Введите последовательность целых чисел через пробел:").split()))

print(not any(L))

