# Создадим файл rectangle_2.py в отдельной директории в папке
# (назовем её python_practice). Выполним импорт класса Rectangle:

from rectangle import Rectangle, Square, Circle

# Далее создаем два прямоугольника

rect_1 = Rectangle(3, 4)
rect_2 = Rectangle(12, 5)
# Выводим площади прямоугольников
print(rect_1.get_area_rectangle(), rect_2.get_area_rectangle())

# Добавляем в импорт новый класс Square через запятую
# Далее создаем два квадрата

square_1 = Square(5)
square_2 = Square(10)
# Выводим площади квадратов
print(square_1.get_area_square(), square_2.get_area_square())  # Можно через запятую в одном принте

# Теперь мы хотим в нашей программе все объекты перенести в единую коллекцию.
# Назовем фигуры (figures). Коллекция содержит список, в который мы помещаем наш первый прямоугольник,
# квадрат и т.д. (см 26 строчку).

figures = [rect_1, rect_2, square_1, square_2]
# Далее пройдемся по циклу for:
for figure in figures:
    if isinstance(figure, Square):
        print(figure.get_area_square())
    else:
        print(figure.get_area_rectangle())
# Это необходимо, чтобы найти площадь каждой фигуры, сохраненной в списке figures.
# Обратите внимание, мы будем работать с прямоугольниками и квадратами с помощью разных методов:
# get_area() и get_area_square(). Внутри цикла проверяем:
# Если экземпляр класса figure является квадратом, то вызываем метод get_area_square().
# В противном случае — обрабатываем данные для прямоугольника методом get_area().
# В условии есть функция isinstance, поддерживающая наследование.
# Она проверяет, является ли аргумент объекта экземпляром класса или экземпляром класса из кортежа.
# В случае если является, функция возвращает True, если не является — False.


# Задание 16.8.2 Выполните задание, взяв за основу полученный код из задания 16.8.1.
# Добавьте еще один класс — круг (class Circle), который принимает в качестве аргументов свой радиус.

circle_1 = Circle(1)
circle_2 = Circle(18)
# Выводим площади кругов
print(circle_1.get_area_circle(), circle_2.get_area_circle())
